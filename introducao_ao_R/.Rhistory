#ComentÃ¡rio sobre o nosso cÃ³digo
1+1
2+2
3*4
#Usar para entender algum comando nÃ£o conhecido
help("mean")
#ou usar \/ para entender (opÃ§Ã£o para o help)
?mean
#Para saber em qual pasta estou trabalhando
getwd()
#~/ pasta raiz do R --> "C:/Users/mateu/Documents" nesse caso
#Definindo o diretÃ³rio aonde vou trabalhar
#Alterar a barra invertida --> R aceita com /
setwd("C:/Users/mateu/Desktop/Aulas R")
#\/ a parte do console muda tambÃ©m --> caminho para onde estÃ¡ apontando
#\/ se usar a seta do lado do caminho aparece a pasta do lado direito
#Sempre definir o diretÃ³rio antes de trabalhar com o R para usar os arquivos neste diretÃ³rio
#ContribuiÃ§Ã£o grande para usar pacotes
#Todos os pacotes homologados estÃ¡o no CRAN
#InstalaÃ§Ã£o de pacotes \/
#Statics Exchange
#Stack Overflow
#/\ buscar para saber qual usar
install.packages("dplyr")
#ou pode ser usado tambÃ©m a parte de Packages no lado direito e em Install
library(dplyr)
#/\ para carregar a biblioteca que serÃ¡ utilizada ou Ã© possÃ­vel clicar no checkbox da library
#R Ã© case sensitive
a = "A"
b = "A"
a == b
#FALSE se maiÃºsculo x minÃºsculo
#TRUE  se maiÃºsculo x maiÃºsculo
6*6
7/2
(4*(6+2))/4
4/0
#/\ Inf === Infinito (divisÃ£o por zero ou limitaÃ§Ã£o da linguagem)
0/0
#/\ NaN === IndeterminaÃ§Ã£o
pi
(sin(pi/2))*3
#/\ Algumas funÃ§Ãµes predefinidas, como pi, por exemplo
pi = "texto"
#/\ Ã possÃ­vel alterar as funÃ§Ãµes predefinidas
#Operadores lÃ³gicos \/
#<
#>
#==
#!=
#!
1 <  1
1 <= 1
1 == 2
1 != 2
!TRUE
#[1] para indicar a saÃ­da de uma linha no console
#Objeto === variÃ¡vel que foi criada
#Olhar no Enviroment (Ambiente) ao lado superior direito para entender os valores atuais das variÃ¡veis
a = 2
minha.variavel1 = 30
minha.variavel2 = 20
minha.variavel1 * minha.variavel2
#Remove variÃ¡vel (rm === remove) --> para gerenciar a memÃ³ria
rm(b)
#Ou pode ser utilizado a vassourinha do lado superior direito na aba Enviroment
# if(<condicao1>) (
#   "Faça algo"
# ) else if(<condicao2>) (
#   "Faça outra coisa"
# ) else (
#   "Faça isso então"
# )
if(a == 2) (
a = 3
) else if(a == 3) (
a = 4
) else (
a = 5
)
if(a == 2) (
a = 3
) else if(a == 3) (
a = 4
) else (
a = 5
)
if(a == 2) (
a = 3
) else if(a == 3) (
a = 4
) else (
a = 5
)
if(a == 2) (
a = 3
) else if(a == 3) (
a = 4
) else (
a = 5
)
if(a == 2) (
a = 3
) else if(a == 3) (
a = 4
) else (
a = 5
)
for(i in 1:4)
for(i in 1:4)
for(i in 1:4)
for(i in 1:4)
for(i in 1:4)
print(i)
for(i in 1:4)
print(i)
for(i in 1:4)
print(i)
for(i in 1:4)
print(i)
1:4
1:1000
for(i in 1:4) {
valor = i + 10
}
for(i in 1:4) {
valor = i + 10
return()
}
#LAÇOS \/
for(i in 1:4) {
valor = i + 10
return(valor)
}
#LAÇOS \/
for(i in 1:4) {
valor = i + 10
print(valor)
}
for(i in 1:4) {
valor = i + 10
print(valor)
}
lista = c("laticínios", "frutas", "produtos de limpeza")
for(i in lista) (
print(paste(i, " - ok"), sep = "")
)
quadrado = function(quad) {
temp = quad * quad
return(temp)
}
quadrado(2)
quadrado(5)
quadrado = function(quad) {
#temp = quad * quad
return(quad * quad)
}
quadrado(5)
quadrado(5)
quadrado(10)
quadrado(200)
#FUNÇÕES \/
quadrado = function(quad) {
#temp = quad * quad
return(quad * quad)
}
quadrado(5)
quadrado(10)
quadrado(200)
projeto = function(horas, preço) {
#temp = horas * preço
return(horas * preço)
}
projeto(10, 2)
projeto(10, 2)
projeto = function(horas, pph = 40) {
#temp = horas * pph
return(horas * pph)
}
projeto(10)
projeto = function(horas, pph = 40) {
vlr.liq = horas * pph
return(vlr.liq * pph)
}
projeto(10)
projeto = function(horas, pph = 40) {
#vlr.liq = horas * pph
return(vlr.liq * pph)
}
projeto(10)
projeto(10)
projeto = function(horas, pph = 40) {
#vlr.liq = horas * pph
return(vlr.liq * pph)
}
projeto(10)
projeto(10, 20)
projeto = function(horas, pph = 40) {
vlr.liq = horas * pph
return(vlr.liq)
}
projeto(10)
projeto(10, 20)
projeto(20)
projeto(20, 30)
projeto(20, 100)
projeto = function(horas, pph = 40) {
vlr.liq = horas * pph
if(horas > 100) {
vlr.liq = horas * pph * .9
}
return(vlr.liq)
}
projeto(20, 100)
projeto(20)
projeto(20, 100)
projeto(20)
projeto(20, 101)
projeto(100, 20)
projeto(100)
projeto(101, 20)
projeto = function(horas, pph = 40) {
vlr.liq = horas * pph
if(horas > 100) {
vlr.liq = vlr.liq * .9
}
return(vlr.liq)
}
projeto(100, 20)
projeto(100)
projeto(101, 20)
projeto = function(horas, pph = 40) {
vlr.liq = horas * pph
if(horas > 100) {
vlr.liq = vlr.liq * .9
}
return(vlr.liq)
}
projeto(100, 20)
projeto(100)
projeto(101, 20)
projeto(99, 100)
projeto(100)
projeto(99)
projeto(99, 100)
projeto(100, 100)
projeto(101, 100)
projeto(99)
projeto(99, 100)
projeto(100, 100)
projeto(101, 100)
vetor = 1:5
vetor2 = 5:10
vetor2 = 5:10:2
2*vetor
2*vetor2
vetor2 = 5:10
2*vetor2
sum(vetor)
vetor.texto = laticinios, produtos de limpeza, frutas
vetor.texto = ("laticinios", "produtos de limpeza", "frutas")
vetor.texto = c("laticinios", "produtos de limpeza", "frutas")
vetor.texto = c("laticinios", "produtos de limpeza", "frutas")
vetor.sequencia = seq(1, 5, by=0.5)
vetor.repeticao = rep(1:2, times = 3)
x = x(5, 4, 9, 6, 8, 9, 23, 9, 9)
x = x(5, 4, 9, 6, 8, 9, 23, 9, 9)
x = c(5, 4, 9, 6, 8, 9, 23, 9, 9)
sort(x)
sort(x, decreasing = TRUE)
sort(x, decreasing = TRUE)
sort(x, decreasing = T)
table(x)
rev(x)
unique(x)
x[0]
x[4]
x[-4]
x[2:5]
x[2:5]
x[-(2:5)]
x[c(1, 3, 5, 7)]
x[x === 23]
x[x == 23]
x[x > 6]
matriz = matrix(1:12, nrow = 3, ncol = 4)
View(matriz)
vetor1 = c(2, 4, 6)
vetor2 = c(8, 10, 6)
vetor1 * vetor2
vetor3 = c(8, 10, 12, 14, 16, 18)
vetor1 * vetor3
matriz2 = matrix(1:12, nrow = 6, ncol = 4)
matriz1 = matrix(1:12, nrow = 3, ncol = 4)
View(matriz2)
matriz2 = matrix(1:6, nrow = 3, ncol = 4)
View(matriz2)
matriz2[1, 2]
matriz1[2, ]
matriz1[, 2]
matriz1[, 1]
matriz1[2, 2]
matriz1[3, 2]
t(matriz1)
lista1 = list(posi1 = 1:5, posi2 = c("a", "b", "c"))
View(lista1)
lista1[2]
lista1[[2]]
sum(lista1[1])
sum(sum(lista1[[2]]))
sum(sum(lista1[[1]]))
sum(sum(lista1[[1]]))
sum(sum(lista1[[1]]))
lista1($)
lista1$posi2
lista1$posi1
lista1$posi1
lista1$posi2
sum(lista1$posi1)
df = data.frame(ColunaA = 1:3, Coluna2 = c("a", "b", "c"))
View(df)
view(df)
View(df)
head(df)
head(df)
#/\ retorna 6 primeiras linhas
tail(df)
df[ ,2]
df[2, ]
df[2,2]
ncol(df)
